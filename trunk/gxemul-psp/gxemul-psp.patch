diff -N -u -r gxemul-0.3.4/Makefile gxemul-psp/Makefile
--- gxemul-0.3.4/Makefile	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/Makefile	Wed Jul  6 13:46:44 2005
@@ -0,0 +1,57 @@
+#
+#  DO NOT EDIT THIS FILE! It is automagically created by
+#  the configure script, based on Makefile.skel.
+#
+
+XINCLUDE=-I/usr/X11R6/include
+XLIB=-L/usr/X11R6/lib -lX11
+CWARNINGS=-Wall 
+COPTIM=-fomit-frame-pointer -fpeephole -O2 
+INCLUDE=-Iinclude/
+DINCLUDE=-I../include/
+CC=cc
+OTHERLIBS=
+
+MIPS_CC=-gcc -g -O2 -fno-builtin -fschedule-insns -mips64 -mabi=64
+MIPS_AS=-as -mabi=64 -mips64
+MIPS_LD=-ld -Ttext 0xa800000000030000 -e main --oformat=elf64-bigmips
+
+#
+#  $Id: Makefile.skel,v 1.30 2005/05/25 06:41:19 debug Exp $
+#
+#  Makefile for GXemul
+#
+
+CFLAGS=$(CWARNINGS) $(COPTIM) $(XDEF) $(XINCLUDE)
+BIN=gxemul
+LIBS=$(XLIB) $(OTHERLIBS)
+
+all: build
+
+build:
+	cd src; $(MAKE); cd ..
+	$(CC) $(COPTIM) src/*.o src/devices/*.o $(LIBS) -o $(BIN)
+
+regtest: build
+	cd tests; $(MAKE) run_tests; cd ..
+
+install: build
+	@echo
+	@echo "There is no automatic 'make install'. You need to manually copy the gxemul"
+	@echo "binary and any other files you need to where you want them to reside. The man/"
+	@echo "subdirectory contains a small man-page, it should probably be placed in"
+	@echo "'/usr/.../man/man1' on most systems, and the contents of the doc/ subdirectory"
+	@echo "could be placed in '/usr/.../share/doc/gxemul'."
+	@echo
+
+clean:
+	rm -f $(BIN) *core core.* *.gmon _*
+	cd src; $(MAKE) clean; cd ..
+
+#  Tests and experiments are not cleaned on a normal clean, only on a clean_all.
+
+clean_all: clean
+	cd tests; $(MAKE) clean_all; cd ..
+	cd experiments; $(MAKE) clean_all; cd ..
+	rm -f config.h Makefile src/Makefile src/devices/Makefile src/devices/fonts/Makefile tests/Makefile
+
Binary files gxemul-0.3.4/boot.bin and gxemul-psp/boot.bin differ
diff -N -u -r gxemul-0.3.4/config.h gxemul-psp/config.h
--- gxemul-0.3.4/config.h	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/config.h	Wed Jul  6 13:46:44 2005
@@ -0,0 +1,19 @@
+/*
+ *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
+ *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
+ */
+
+#ifndef CONFIG_H
+#define CONFIG_H
+
+#define VERSION "psp"
+#define COMPILE_DATE "compiled on Darwin/Power Macintosh, Wed Jul 6 13:46:35 EST 2005"
+#define ENABLE_ARM
+#define ENABLE_MIPS
+#define ENABLE_PPC
+#define ENABLE_URISC
+#define WITH_X11
+#define HAVE_INET_PTON
+#define PREFETCH(x) { }
+
+#endif  /*  CONFIG_H  */
Binary files gxemul-0.3.4/hellopsp.elf and gxemul-psp/hellopsp.elf differ
Binary files gxemul-0.3.4/kmem.bin and gxemul-psp/kmem.bin differ
Binary files gxemul-0.3.4/src/.psp_bios.c.swp and gxemul-psp/src/.psp_bios.c.swp differ
diff -N -u -r gxemul-0.3.4/src/Makefile gxemul-psp/src/Makefile
--- gxemul-0.3.4/src/Makefile	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/src/Makefile	Wed Jul  6 13:49:59 2005
@@ -0,0 +1,65 @@
+#
+#  DO NOT EDIT THIS FILE! It is automagically created by
+#  the configure script, based on Makefile.skel.
+#
+
+XINCLUDE=-I/usr/X11R6/include
+XLIB=-L/usr/X11R6/lib -lX11
+CWARNINGS=-Wall 
+COPTIM=-fomit-frame-pointer -fpeephole -O2 
+INCLUDE=-Iinclude/
+DINCLUDE=-I../include/
+CC=cc
+OTHERLIBS=
+
+MIPS_CC=-gcc -g -O2 -fno-builtin -fschedule-insns -mips64 -mabi=64
+MIPS_AS=-as -mabi=64 -mips64
+MIPS_LD=-ld -Ttext 0xa800000000030000 -e main --oformat=elf64-bigmips
+
+#
+#  $Id: Makefile.skel,v 1.57 2005/06/27 10:43:16 debug Exp $
+#
+#  Makefile for GXemul src
+#
+
+CFLAGS=$(CWARNINGS) $(COPTIM) $(XINCLUDE) $(INCLUDE)
+
+OBJS=console.o cpu.o debugger.o diskimage.o emul.o emul_parse.o file.o \
+	machine.o main.o misc.o memory.o device.o net.o symbol.o useremul.o \
+	x11.o cpu_mips.o cpu_mips_coproc.o memory_fast_v2h.o bintrans.o \
+	cpu_arm.o cpu_ppc.o cpu_urisc.o \
+	cpu_x86.o arcbios.o dec_prom.o ps2_bios.o of.o pc_bios.o yamon.o \
+	psp_bios.o
+
+
+all: do_src do_devices
+
+do_devices:
+	cd devices; $(MAKE); cd ..
+
+do_src: $(OBJS)
+
+$(OBJS): Makefile
+
+bintrans.o: bintrans.c bintrans_alpha.c bintrans_i386.c
+
+cpu_arm.o: cpu_arm.c cpu_arm_instr.c memory_rw.c
+
+cpu_mips.o: cpu_mips.c cpu_mips16.c memory_mips.c
+
+memory_mips.c: memory_rw.c memory_mips_v2p.c
+
+cpu_ppc.o: cpu_ppc.c memory_rw.c
+
+cpu_x86.o: cpu_x86.c memory_x86.c
+
+memory_x86.c: memory_rw.c
+
+clean:
+	rm -f $(OBJS) *core
+	cd devices; $(MAKE) clean; cd ..
+
+clean_all: clean
+	cd devices; $(MAKE) clean_all; cd ..
+	rm -f Makefile
+
diff -N -u -r gxemul-0.3.4/src/Makefile.skel gxemul-psp/src/Makefile.skel
--- gxemul-0.3.4/src/Makefile.skel	Mon Jun 27 20:43:16 2005
+++ gxemul-psp/src/Makefile.skel	Wed Jul  6 13:50:14 2005
@@ -10,7 +10,8 @@
 	machine.o main.o misc.o memory.o device.o net.o symbol.o useremul.o \
 	x11.o cpu_mips.o cpu_mips_coproc.o memory_fast_v2h.o bintrans.o \
 	cpu_arm.o cpu_ppc.o cpu_urisc.o \
-	cpu_x86.o arcbios.o dec_prom.o ps2_bios.o of.o pc_bios.o yamon.o
+	cpu_x86.o arcbios.o dec_prom.o ps2_bios.o of.o pc_bios.o yamon.o \
+	psp_bios.o
 
 
 all: do_src do_devices
diff -N -u -r gxemul-0.3.4/src/cpu_mips.c gxemul-psp/src/cpu_mips.c
--- gxemul-0.3.4/src/cpu_mips.c	Mon Jun 27 08:23:42 2005
+++ gxemul-psp/src/cpu_mips.c	Wed Jul  6 13:46:28 2005
@@ -1185,6 +1185,12 @@
 		} else if (special6 == SPECIAL2_DCLO) {
 			debug("dclo\t%s", regname(cpu->machine, rd));
 			debug(",%s", regname(cpu->machine, rs));
+		} else if (special6 == SPECIAL2_PSP1) {
+			debug("psp1\t%s", regname(cpu->machine, rd));
+			debug(",%s", regname(cpu->machine, rs));
+		} else if (special6 == SPECIAL2_PSP2) {
+			debug("psp2\t%s", regname(cpu->machine, rd));
+			debug(",%s", regname(cpu->machine, rs));
 		} else if ((instrword & 0xffff07ffULL) == 0x70000209
 		    || (instrword & 0xffff07ffULL) == 0x70000249) {
 			if (instr[0] == 0x49) {
@@ -3853,6 +3859,7 @@
 				tmp = 0;
 			break;
 		}
+/*
 		if (cpu->cd.mips.coproc[cpnr] == NULL ||
 		    (tmp && !(cp0->reg[COP0_STATUS] & ((1 << cpnr) << STATUS_CU_SHIFT))) ||
 		    (!tmp && cpnr >= 1 && !(cp0->reg[COP0_STATUS] & ((1 << cpnr) << STATUS_CU_SHIFT)))
@@ -3862,6 +3869,7 @@
 
 			mips_cpu_exception(cpu, EXCEPTION_CPU, 0, 0, cpnr, 0, 0, 0);
 		} else {
+*/
 			/*
 			 *  Execute the coprocessor function. The
 			 *  coproc_function code outputs instruction
@@ -3869,7 +3877,7 @@
 			 */
 			coproc_function(cpu, cpu->cd.mips.coproc[cpnr],
 			    cpnr, imm, 0, 1);
-		}
+//		}
 		return 1;
 	case HI6_CACHE:
 		rt   = ((instr[3] & 3) << 3) + (instr[2] >> 5);	/*  base  */
@@ -4044,6 +4052,11 @@
 					break;
 			}
 			cpu->cd.mips.gpr[rd] = n;
+		} else if (special6 == SPECIAL2_PSP1) {
+			/* toggle ie bit of status reg (?).. its probably more complicated */
+//			cp0->reg[COP0_STATUS] ^= STATUS_IE;
+		} else if (special6 == SPECIAL2_PSP2) {
+			/* todo.. this probably sets the status flag */
 		} else {
 			if (!instruction_trace_cached) {
 				fatal("cpu%i @ %016llx: %02x%02x%02x%02x%s\t",
diff -N -u -r gxemul-0.3.4/src/devices/Makefile gxemul-psp/src/devices/Makefile
--- gxemul-0.3.4/src/devices/Makefile	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/src/devices/Makefile	Wed Jul  6 13:47:12 2005
@@ -0,0 +1,92 @@
+#
+#  DO NOT EDIT THIS FILE! It is automagically created by
+#  the configure script, based on Makefile.skel.
+#
+
+XINCLUDE=-I/usr/X11R6/include
+XLIB=-L/usr/X11R6/lib -lX11
+CWARNINGS=-Wall 
+COPTIM=-fomit-frame-pointer -fpeephole -O2 
+INCLUDE=-Iinclude/
+DINCLUDE=-I../include/
+CC=cc
+OTHERLIBS=
+
+MIPS_CC=-gcc -g -O2 -fno-builtin -fschedule-insns -mips64 -mabi=64
+MIPS_AS=-as -mabi=64 -mips64
+MIPS_LD=-ld -Ttext 0xa800000000030000 -e main --oformat=elf64-bigmips
+
+#
+#  $Id: Makefile.skel,v 1.83 2005/06/21 18:48:08 debug Exp $
+#
+#  Makefile for GXemul devices
+#
+
+CFLAGS=$(CWARNINGS) $(COPTIM) $(XINCLUDE) $(DINCLUDE)
+OBJS=lk201.o \
+	dev_ram.o dev_cons.o dev_mp.o dev_unreadable.o dev_zero.o dev_random.o \
+	dev_gt.o \
+	dev_mc146818.o \
+	dev_dc7085.o dev_ssc.o dev_scc.o dev_ns16550.o dev_8250.o dev_zs.o \
+	dev_fb.o dev_colorplanemask.o dev_px.o dev_sfb.o dev_pmagja.o \
+	dev_bt459.o dev_bt455.o dev_bt431.o \
+	dev_vga.o dev_pckbc.o dev_8253.o dev_8259.o dev_pccmos.o \
+	dev_rd94.o dev_jazz.o dev_m700_fb.o dev_fdc.o \
+	dev_sgi_ip19.o dev_sgi_ip20.o dev_sgi_ip22.o dev_sgi_ip30.o \
+	dev_sgi_ip32.o dev_sgi_gbe.o dev_sgi_mardigras.o \
+	dev_kn01.o dev_kn02.o dev_kn210.o dev_kn220.o dev_kn230.o \
+	dev_dec5800.o \
+	dev_dec_ioasic.o dev_turbochannel.o \
+	dev_sii.o dev_asc.o dev_wdsc.o dev_wdc.o \
+	dev_le.o dev_sn.o \
+	dev_ps2_stuff.o dev_ps2_gs.o dev_ps2_gif.o \
+	dev_ps2_spd.o dev_ps2_ether.o \
+	dev_ohci.o \
+	dev_vr41xx.o dev_au1x00.o \
+	dev_malta.o dev_malta_lcd.o \
+	dev_pmppc.o \
+	bus_pci.o \
+	pci_dec21030.o pci_dec21143.o pci_vt82c586.o pci_ahc.o \
+	dev_pcic.o \
+	dev_urisc.o \
+	dev_bebox.o
+
+all:
+	cd fonts; $(MAKE); cd ..
+	make fb_logo.c font8x8.c font8x10.c font8x16.c
+	make objs
+	make autodev.o
+
+autodev.c: $(OBJS)
+	./makeautodev.sh
+
+objs: $(OBJS)
+
+$(OBJS): Makefile
+
+dev_vga.o: font8x8.c font8x16.c font8x10.c
+
+dev_fb.o: fb_logo.c
+
+font8x8.c:
+	cp -f fonts/font8x8.c .
+
+font8x10.c:
+	cp -f fonts/font8x10.c .
+
+font8x16.c:
+	cp -f fonts/font8x16.c .
+
+fb_logo.c: fb_logo.ppm font8x16.c
+	fonts/Xconv_raw_to_c fb_logo.ppm fb_logo_ppm > fb_logo.c
+
+
+clean:
+	rm -f $(OBJS) *core font8x16.c font8x10.c font8x8.c fb_logo.c
+	rm -f autodev.[co]
+	cd fonts; $(MAKE) clean; cd ..
+
+clean_all: clean
+	cd fonts; $(MAKE) clean_all; cd ..
+	rm -f Makefile fonts/Makefile
+
diff -N -u -r gxemul-0.3.4/src/devices/fonts/Makefile gxemul-psp/src/devices/fonts/Makefile
--- gxemul-0.3.4/src/devices/fonts/Makefile	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/src/devices/fonts/Makefile	Wed Jul  6 13:47:12 2005
@@ -0,0 +1,37 @@
+#
+#  DO NOT EDIT THIS FILE! It is automagically created by
+#  the configure script, based on Makefile.skel.
+#
+
+XINCLUDE=-I/usr/X11R6/include
+XLIB=-L/usr/X11R6/lib -lX11
+CWARNINGS=-Wall 
+COPTIM=-fomit-frame-pointer -fpeephole -O2 
+INCLUDE=-Iinclude/
+DINCLUDE=-I../include/
+CC=cc
+OTHERLIBS=
+
+MIPS_CC=-gcc -g -O2 -fno-builtin -fschedule-insns -mips64 -mabi=64
+MIPS_AS=-as -mabi=64 -mips64
+MIPS_LD=-ld -Ttext 0xa800000000030000 -e main --oformat=elf64-bigmips
+
+#  $Id: Makefile.skel,v 1.2 2005/01/18 12:43:49 debug Exp $
+
+all: font8x8.c font8x10.c font8x16.c
+
+font8x8.c: Xconv_raw_to_c
+	./Xconv_raw_to_c vt220l.808 font8x8 > font8x8.c
+
+font8x10.c: Xconv_raw_to_c
+	./Xconv_raw_to_c vt220l.810 font8x10 > font8x10.c
+
+font8x16.c: Xconv_raw_to_c
+	./Xconv_raw_to_c vt220l.816 font8x16 > font8x16.c
+
+clean:
+	rm -f Xconv_raw_to_c font8x16.c font8x8.c font8x10.c
+
+clean_all: clean
+	rm -f Makefile
+
diff -N -u -r gxemul-0.3.4/src/file.c gxemul-psp/src/file.c
--- gxemul-0.3.4/src/file.c	Sun Jun 26 19:21:28 2005
+++ gxemul-psp/src/file.c	Wed Jul  6 13:46:28 2005
@@ -46,6 +46,7 @@
 #include <sys/types.h>
 
 #include "cpu.h"
+#include "cop0.h"
 #include "exec_aout.h"
 #include "exec_ecoff.h"
 #include "exec_elf.h"
@@ -1511,6 +1512,24 @@
 		if (tocp != NULL)
 			*tocp = toc_base;
 	}
+
+  	/* load elf (prx) using kernel */
+        if (m->machine_type == MACHINE_PSP) {
+
+                /*
+                 *  sceKernelLoadExecBufferPlain v1.0
+                 *  func  nid:0x71A1D738  addr 88064AB4 
+                 */
+              m->cpus[0]->cd.mips.gpr[MIPS_GPR_A0] = 1; 
+              m->cpus[0]->cd.mips.gpr[MIPS_GPR_A1] = *entrypointp; 
+              m->cpus[0]->cd.mips.gpr[MIPS_GPR_A2] = 0; 
+//              m->cpus[0]->cd.mips.gpr[MIPS_GPR_RA] = *entrypointp; 
+//	      m->cpus[0]->cd.mips.coproc[0]->reg[22] = *entrypointp; 
+//	      m->cpus[0]->cd.mips.coproc[0]->reg[COP0_EPC] = *entrypointp; // somethings gotta give
+              *entrypointp = 0x88064ab4;  // perhaps we can just exec using the loaded kernel
+//		*entrypointp = 0xbfc00000;	// boot.bin
+
+        }
 
 	n_executables_loaded ++;
 }
diff -N -u -r gxemul-0.3.4/src/include/cpuregs.h gxemul-psp/src/include/cpuregs.h
--- gxemul-0.3.4/src/include/cpuregs.h	Sat Mar  5 23:34:02 2005
+++ gxemul-psp/src/include/cpuregs.h	Wed Jul  6 13:46:28 2005
@@ -698,6 +698,7 @@
 #define	MIPS_R5900	0x2e	/* Toshiba R5900 (EECore)	ISA --- */
 #define	MIPS_RC64470	0x30	/* IDT RC64474/RC64475 		ISA III */
 #define	MIPS_R5400	0x54	/* NEC VR5400 			ISA IV	*/
+#define	MIPS_ALLEGREX	0xa2	/* Toshiba(?) Allegrex		ISA III	*/
 
 /*
  * CPU revision IDs for some prehistoric processors.
diff -N -u -r gxemul-0.3.4/src/include/mips_cpu_types.h gxemul-psp/src/include/mips_cpu_types.h
--- gxemul-0.3.4/src/include/mips_cpu_types.h	Fri Jun 24 19:33:37 2005
+++ gxemul-psp/src/include/mips_cpu_types.h	Wed Jul  6 13:46:28 2005
@@ -109,7 +109,7 @@
 	{ "AU1100",	0x020301,   0x00,       0,	EXC32, MMU32,  32,      32, 2, 0, 0, 0, 0, 0, 0 }, /*  TODO: this is just bogus  */ \
 	{ "SB1",	0x000401,   0x00,	0,	EXC64, MMU64,  64,      32, 2, 0, 0, 0, 0, 0, 0 }, /*  TODO: this is just bogus  */ \
 	{ "SR7100",	0x000504,   0x00,	0,	EXC64, MMU64,  64,      32, 2, 0, 0, 0, 0, 0, 0 }, /*  TODO: this is just bogus  */ \
-	{ "Allegrex",	0x000000,   0x00,	0,	EXC3K, MMU32,   2,       4, 1,14,14, 6, 6, 0, 0 }, \
+	{ "Allegrex",	0x0,        0x00,	0,	EXC4K, MMU32,   2,      32, 1,14,14, 6, 6, 0, 0 }, \
 	{ NULL,		0,          0,          0,      0,     0,       0,       0, 0, 0, 0, 0, 0, 0, 0 } }
 
 #endif	/*  CPU_TYPES_H  */
diff -N -u -r gxemul-0.3.4/src/include/opcodes_mips.h gxemul-psp/src/include/opcodes_mips.h
--- gxemul-0.3.4/src/include/opcodes_mips.h	Tue Mar 15 17:52:15 2005
+++ gxemul-psp/src/include/opcodes_mips.h	Wed Jul  6 13:46:28 2005
@@ -202,8 +202,11 @@
 #define	    SPECIAL2_PMFHI		    0x09    /*  001001  */  /*  Undocumented R5900 ?  */
 #define	    SPECIAL2_CLZ		    0x20    /*  100100  */  /*  MIPS32  */
 #define	    SPECIAL2_CLO		    0x21    /*  100101  */  /*  MIPS32  */
-#define	    SPECIAL2_DCLZ		    0x24    /*  100100  */  /*  MIPS64  */
+//#define	    SPECIAL2_DCLZ		    0x24    /*  100100  */  /*  MIPS64  */
+#define	    SPECIAL2_DCLZ		    0xFF    
+#define	    SPECIAL2_PSP2		    0x24    /*  100100  */  /*  PSP  */
 #define	    SPECIAL2_DCLO		    0x25    /*  100101  */  /*  MIPS64  */
+#define	    SPECIAL2_PSP1	    	    0x26    /*  100110  */  /*  PSP  */
 #define	    SPECIAL2_POR		    0x29    /*  101001  */  /*  Undocumented R5900 ?  */
 #define	    SPECIAL2_SDBBP		    0x3f    /*  111111  */  /*  EJTAG (?)  TODO  */
 /*	JALX (TODO)			0x1d	    011101  */
diff -N -u -r gxemul-0.3.4/src/machine.c gxemul-psp/src/machine.c
--- gxemul-0.3.4/src/machine.c	Sun Jun 26 21:36:28 2005
+++ gxemul-psp/src/machine.c	Wed Jul  6 13:46:28 2005
@@ -3767,23 +3767,38 @@
 		fb = dev_fb_init(machine, mem, 0x04000000, VFB_HPCMIPS,
 		    480,272, 512,1088, -15, "Playstation Portable", 0);
 
+#define MEG16	1024 * 1024 * 16
 		/*
 		 *  TODO/NOTE: This is ugly, but necessary since GXemul doesn't
 		 *  emulate any MIPS CPU without MMU right now.
 		 */
-		mips_coproc_tlb_set_entry(cpu, 0, 1048576*16,
-		    0x44000000 /*vaddr*/, 0x4000000, 0x4000000 + 1048576*16,
-		    1,1,1,1,1, 0, 2, 2);
-		mips_coproc_tlb_set_entry(cpu, 1, 1048576*16,
-		    0x8000000 /*vaddr*/, 0x0, 0x0 + 1048576*16,
-		    1,1,1,1,1, 0, 2, 2);
-		mips_coproc_tlb_set_entry(cpu, 2, 1048576*16,
-		    0x9000000 /*vaddr*/, 0x01000000, 0x01000000 + 1048576*16,
-		    1,1,1,1,1, 0, 2, 2);
-		mips_coproc_tlb_set_entry(cpu, 3, 1048576*16,
-		    0x0 /*vaddr*/, 0, 0 + 1048576*16, 1,1,1,1,1, 0, 2, 2);
+		mips_coproc_tlb_set_entry(cpu, 0, MEG16,
+		    0x44000000 /*vaddr*/, 0x04000000, 0x04000000 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 1, MEG16,
+		    0x04000000 /*vaddr*/, 0x04000000, 0x04000000 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 2, MEG16,
+		    0x88000000 /*vaddr*/, 0x0, 0x0 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 3, MEG16,
+		    0x9000000 /*vaddr*/, 0x01000000, 0x01000000 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 4, MEG16,
+		    0x0 /*vaddr*/, 0, 0 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 5, MEG16,
+		    0xffffffffffffffff - MEG16 /*vaddr*/, 0, 0 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 6, MEG16,
+		    0x10000000 /*vaddr*/, 0, 0 + MEG16, 1,1,1,1,1, 0, 2, 2);
+
+		mips_coproc_tlb_set_entry(cpu, 7, MEG16,
+		    0xffffffff88000000 /*vaddr*/, 0, 0 + MEG16, 1,1,1,1,1, 0, 2, 2);
 
 		cpu->cd.mips.gpr[MIPS_GPR_SP] = 0xfff0;
+
+		pspbios_init(machine, cpu);
 
 		break;
 
diff -N -u -r gxemul-0.3.4/src/memory_rw.c gxemul-psp/src/memory_rw.c
--- gxemul-0.3.4/src/memory_rw.c	Mon Jun 27 17:03:39 2005
+++ gxemul-psp/src/memory_rw.c	Wed Jul  6 13:46:28 2005
@@ -206,8 +206,9 @@
 		/*  If the translation caused an exception, or was invalid in
 		    some way, we simply return without doing the memory
 		    access:  */
-		if (!ok)
-			return MEMORY_ACCESS_FAILED;
+//printf ("skipping MEMORY_ACCESS_FAILED (%s:%d)\n", __FILE__, __LINE__);
+//		if (!ok)
+//			return MEMORY_ACCESS_FAILED;
 	}
 
 
@@ -450,7 +451,8 @@
 
 
 	/*  Outside of physical RAM?  */
-	if (paddr >= mem->physical_max) {
+//	if (paddr >= mem->physical_max) {
+	if (0) { // dont need this check for psp homebrew
 #ifdef MEM_MIPS
 		if ((paddr & 0xffffc00000ULL) == 0x1fc00000) {
 			/*  Ok, this is PROM stuff  */
diff -N -u -r gxemul-0.3.4/src/psp_bios.c gxemul-psp/src/psp_bios.c
--- gxemul-0.3.4/src/psp_bios.c	Thu Jan  1 10:00:00 1970
+++ gxemul-psp/src/psp_bios.c	Wed Jul  6 13:54:27 2005
@@ -0,0 +1,481 @@
+/*
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions are met:
+ *
+ *  1. Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *  2. Redistributions in binary form must reproduce the above copyright  
+ *     notice, this list of conditions and the following disclaimer in the 
+ *     documentation and/or other materials provided with the distribution.
+ *  3. The name of the author may not be used to endorse or promote products
+ *     derived from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ *  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE   
+ *  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ *  SUCH DAMAGE.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/resource.h>
+
+#include "psp_bios.h"
+#include "cop0.h"
+#include "console.h"
+#include "cpu.h"
+#include "cpu_mips.h"
+#include "diskimage.h"
+#include "machine.h"
+#include "memory.h"
+#include "misc.h"
+#include "symbol.h"
+
+
+extern int quiet_mode;
+
+/*
+ *  pspbios_init():
+ */
+void pspbios_init(struct machine *machine, struct cpu *cpu)
+{
+	FILE *f;
+	int len;
+	char c;
+	int ptr;
+
+	cpu->cd.mips.coproc[0]->reg[0] = 0;
+	cpu->cd.mips.coproc[0]->reg[1] = 0;
+	cpu->cd.mips.coproc[0]->reg[2] = 0;
+	cpu->cd.mips.coproc[0]->reg[3] = 0;
+	cpu->cd.mips.coproc[0]->reg[4] = 0;
+	cpu->cd.mips.coproc[0]->reg[5] = 0;
+	cpu->cd.mips.coproc[0]->reg[6] = 0;
+	cpu->cd.mips.coproc[0]->reg[7] = 0;
+	cpu->cd.mips.coproc[0]->reg[COP0_BADVADDR] = 0xe3fc4cc7;
+	cpu->cd.mips.coproc[0]->reg[COP0_COUNT] = 0x18e71a74;
+	cpu->cd.mips.coproc[0]->reg[COP0_ENTRYHI] = 0;
+	cpu->cd.mips.coproc[0]->reg[11] = 0;
+	cpu->cd.mips.coproc[0]->reg[COP0_STATUS] = 0x20008601;
+	cpu->cd.mips.coproc[0]->reg[COP0_CAUSE] = 0x80000020;
+	cpu->cd.mips.coproc[0]->reg[COP0_EPC] = 0x089001b8;
+	cpu->cd.mips.coproc[0]->reg[COP0_PRID] = 0x31040125;
+	cpu->cd.mips.coproc[0]->reg[COP0_CONFIG] = 0x480;
+	cpu->cd.mips.coproc[0]->reg[17] = 0;
+	cpu->cd.mips.coproc[0]->reg[18] = 0;
+	cpu->cd.mips.coproc[0]->reg[19] = 0;
+	cpu->cd.mips.coproc[0]->reg[20] = 0;
+	cpu->cd.mips.coproc[0]->reg[COP0_FRAMEMASK] = 0x8200;
+	cpu->cd.mips.coproc[0]->reg[22] = 0;
+	cpu->cd.mips.coproc[0]->reg[23] = 0;
+	cpu->cd.mips.coproc[0]->reg[24] = 0xec400000;
+	cpu->cd.mips.coproc[0]->reg[25] = 0x88019de0;
+	cpu->cd.mips.coproc[0]->reg[26] = 0;
+	cpu->cd.mips.coproc[0]->reg[27] = 0;
+	cpu->cd.mips.coproc[0]->reg[28] = 0x184fff;
+	cpu->cd.mips.coproc[0]->reg[29] = 0x440cf;
+	cpu->cd.mips.coproc[0]->reg[30] = 0xc43fc;
+	cpu->cd.mips.coproc[0]->reg[31] = 0;
+
+	/* v1.0 */
+
+	/* SysMemForKernel */
+	add_symbol_name(&machine->symbol_context, 0x880001C8, 0, "sceKernelCreateHeap", 0);
+	add_symbol_name(&machine->symbol_context, 0x880004A8, 0, "sceKernelDeleteHeap", 0);
+	add_symbol_name(&machine->symbol_context, 0x880006F0, 0, "sceKernelAllocHeapMemoryWithOption", 0);
+	add_symbol_name(&machine->symbol_context, 0x88000890, 0, "sceKernelFreeHeapMemory", 0);
+	add_symbol_name(&machine->symbol_context, 0x88000980, 0, "sceKernelHeapTotalFreeSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x88000A04, 0, "sceKernelGetHeapTypeCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x88000AD0, 0, "sceKernelIsValidHeap", 0);
+	add_symbol_name(&machine->symbol_context, 0x88000FB0, 0, "sceKernelAllocHeapMemory", 0);
+	add_symbol_name(&machine->symbol_context, 0x88001668, 0, "sceKernelQueryMemoryPartitionInfo", 0);
+	add_symbol_name(&machine->symbol_context, 0x88001858, 0, "sceKernelPartitionMaxFreeMemSize", 0);
+/* U */	add_symbol_name(&machine->symbol_context, 0x880018A8, 0, "sceKernelMaxFreeMemSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x88001918, 0, "sceKernelPartitionTotalFreeMemSize", 0);
+/* U */	add_symbol_name(&machine->symbol_context, 0x88001968, 0, "sceKernelTotalFreeMemSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x880019BC, 0, "sceKernelFillFreeBlock", 0);
+	add_symbol_name(&machine->symbol_context, 0x88001FEC, 0, "sceKernelAllocPartitionMemory", 0);
+/* U */	add_symbol_name(&machine->symbol_context, 0x88002190, 0, "sceKernelAllocPartitionMemory", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800225C, 0, "sceKernelSizeLockMemoryBlock", 0);
+	add_symbol_name(&machine->symbol_context, 0x880022FC, 0, "sceKernelResizeMemoryBlock", 0);
+	add_symbol_name(&machine->symbol_context, 0x880029A8, 0, "sceKernelJointMemoryBlock", 0);
+/* U */	add_symbol_name(&machine->symbol_context, 0x88002A80, 0, "sceKernelFreePartitionMemory", 0);
+	add_symbol_name(&machine->symbol_context, 0x88002B8C, 0, "sceKernelQueryMemoryInfo", 0);
+	add_symbol_name(&machine->symbol_context, 0x88002C0C, 0, "sceKernelQueryBlockSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x88002CFC, 0, "sceKernelQueryMemoryBlockInfo", 0);
+/* U */	add_symbol_name(&machine->symbol_context, 0x88002E64, 0, "sceKernelGetBlockHeadAddr", 0);
+	add_symbol_name(&machine->symbol_context, 0x88003F14, 0, "sceKernelFreePartitionMemory", 0);
+	add_symbol_name(&machine->symbol_context, 0x88003FBC, 0, "sceKernelGetBlockHeadAddr", 0);
+	add_symbol_name(&machine->symbol_context, 0x88004FA4, 0, "sceKernelCallUIDFunction", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005090, 0, "sceKernelCallUIDObjFunction", 0);
+	add_symbol_name(&machine->symbol_context, 0x880051E8, 0, "sceKernelLookupUIDFunction", 0);
+	add_symbol_name(&machine->symbol_context, 0x880056DC, 0, "sceKernelCreateUIDtype", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005720, 0, "sceKernelDeleteUIDtype", 0);
+	add_symbol_name(&machine->symbol_context, 0x880057DC, 0, "sceKernelGetUIDname", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005890, 0, "sceKernelRenameUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005948, 0, "sceKernelGetUIDtype", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005A14, 0, "sceKernelCreateUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005B18, 0, "sceKernelDeleteUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005B38, 0, "sceKernelSearchUIDbyName", 0);
+	add_symbol_name(&machine->symbol_context, 0x88005C5C, 0, "sceKernelGetUIDcontrolBlock", 0);
+	add_symbol_name(&machine->symbol_context, 0x880061A0, 0, "sceKernelIsHold", 0);
+	add_symbol_name(&machine->symbol_context, 0x880062B0, 0, "sceKernelHoldUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x88006520, 0, "sceKernelReleaseUID", 0);
+
+	/* KDebugForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88007580, 0, "sceKernelGetDebugPutchar", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800758C, 0, "sceKernelRegisterDebugPutchar", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007598, 0, "sceKernelRegisterKprintfHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007D4C, 0, "Kprintf", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007DD8, 0, "sceKernelDebugWrite", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E08, 0, "sceKernelRegisterDebugWrite", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E18, 0, "sceKernelDebugRead", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E48, 0, "sceKernelRegisterDebugRead", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E58, 0, "sceKernelDebugEcho", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E64, 0, "sceKernelDebugEchoSet", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E74, 0, "sceKernelRegisterAssertHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007E80, 0, "sceKernelAssert", 0);
+/* ? */	add_symbol_name(&machine->symbol_context, 0x88007F1C, 0, "sceKernelUNKNOWN", 0);
+	add_symbol_name(&machine->symbol_context, 0x88007F48, 0, "sceKernelRemoveByDebugSection", 0);
+
+	/* ...SysMemForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88008ACC, 0, "sceKernelSysmemIsValidAccess", 0);
+	add_symbol_name(&machine->symbol_context, 0x880090E4, 0, "sceKernelIsValidUserAccess", 0);
+	add_symbol_name(&machine->symbol_context, 0x88009108, 0, "sceKernelSysMemCheckCtlBlk", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800933C, 0, "sceKernelSysMemDump", 0);
+	add_symbol_name(&machine->symbol_context, 0x88009430, 0, "sceKernelSysMemDumpBlock", 0);
+	add_symbol_name(&machine->symbol_context, 0x880094A0, 0, "sceKernelSysMemDumpTail", 0);
+	add_symbol_name(&machine->symbol_context, 0x88009AFC, 0, "sceKernelSysMemInit", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800A75C, 0, "sceKernelSysMemMemSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800A7E0, 0, "sceKernelSysMemMaxFreeMemSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800A890, 0, "sceKernelSysMemTotalFreeMemSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x8800A930, 0, "sceKernelGetSysMemoryInfo", 0);
+
+	/* ...KDebugForKernel */
+	add_symbol_name(&machine->symbol_context, 0x8800AA70, 0, "sceKernelAcceptMbogoSig", 0);
+
+	/* ...SysMemForKernel */
+	add_symbol_name(&machine->symbol_context, 0x8800AA9C, 0, "sceKernelDevkitVersion", 0);
+
+	/* ? */
+	add_symbol_name(&machine->symbol_context, 0x8800AB00, 0, "WeirdOpcodeStuff", 0);
+
+	/* LoadCoreForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88010E50, 0, "sceKernelRegisterLibrary", 0);
+	add_symbol_name(&machine->symbol_context, 0x88010E6C, 0, "sceKernelRegisterLibraryForUser", 0);
+	add_symbol_name(&machine->symbol_context, 0x88011034, 0, "sceKernelReleaseLibrary", 0);
+	add_symbol_name(&machine->symbol_context, 0x880110CC, 0, "sceKernelCanReleaseLibrary", 0);
+	add_symbol_name(&machine->symbol_context, 0x880112E4, 0, "sceKernelLinkLibraryEntries", 0);
+	add_symbol_name(&machine->symbol_context, 0x88011300, 0, "sceKernelLinkLibraryEntriesForUser", 0);
+	add_symbol_name(&machine->symbol_context, 0x88011458, 0, "sceKernelUnLinkLibraryEntries", 0);
+	add_symbol_name(&machine->symbol_context, 0x880114C0, 0, "sceKernelQueryLoadCoreCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x88011F60, 0, "sceKernelSetBootCallbackLevel", 0);
+	add_symbol_name(&machine->symbol_context, 0x88011FE8, 0, "sceKernelCheckPspConfig", 0);
+	add_symbol_name(&machine->symbol_context, 0x88012CD8, 0, "sceKernelCheckExecFile", 0);
+	add_symbol_name(&machine->symbol_context, 0x88012F78, 0, "sceKernelProbeExecutableObject", 0);
+	add_symbol_name(&machine->symbol_context, 0x88013158, 0, "sceKernelLoadExecutableObject", 0);
+	add_symbol_name(&machine->symbol_context, 0x88013C40, 0, "sceKernelApplyElfRelSection", 0);
+	add_symbol_name(&machine->symbol_context, 0x88013E84, 0, "LoadCoreForKernel_Unkonow00", 0);
+	add_symbol_name(&machine->symbol_context, 0x88014318, 0, "sceKernelModuleFromUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x880143D0, 0, "sceKernelCreateModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801445C, 0, "sceKernelDeleteModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x880144A8, 0, "sceKernelModuleAssign", 0);
+	add_symbol_name(&machine->symbol_context, 0x88014670, 0, "sceKernelAllocModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x880146BC, 0, "sceKernelFreeModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x880146D8, 0, "sceKernelRegisterModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x88014758, 0, "sceKernelReleaseModule", 0);
+	add_symbol_name(&machine->symbol_context, 0x880147E8, 0, "sceKernelFindModuleByName", 0);
+	add_symbol_name(&machine->symbol_context, 0x88014830, 0, "sceKernelFindModuleByAddress", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801488C, 0, "sceKernelFindModuleByUID", 0);
+	add_symbol_name(&machine->symbol_context, 0x880148F0, 0, "sceKernelModuleCount", 0);
+	add_symbol_name(&machine->symbol_context, 0x880148FC, 0, "sceKernelGetModuleList", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801496C, 0, "sceKernelDcacheWBinvAll", 0);
+	add_symbol_name(&machine->symbol_context, 0x880149B0, 0, "sceKernelIcacheClearAll", 0);
+
+	/* ExceptionManagerForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88019940, 0, "sceKernelRegisterExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019960, 0, "sceKernelRegisterPriorityExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019A5C, 0, "sceKernelRegisterDefaultExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019AF0, 0, "sceKernelReleaseExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019BB4, 0, "sceKernelGetActiveDefaultExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019BDC, 0, "sceKernelReleaseDefaultExceptionHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88019FD4, 0, "sceKernelRegisterNmiHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801A03C, 0, "sceKernelReleaseNmiHandler", 0);
+
+	/* InterruptManagerForKernel */
+	add_symbol_name(&machine->symbol_context, 0x8801BBC4, 0, "sceKernelCpuEnableIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801BD70, 0, "sceKernelRegisterIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C0EC, 0, "sceKernelReleaseIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C1B4, 0, "sceKernelSetIntrLevel", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C3B4, 0, "sceKernelIsInterruptOccurred", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C454, 0, "sceKernelEnableIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C520, 0, "sceKernelSuspendIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C63C, 0, "sceKernelDisableIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C658, 0, "sceKernelResumeIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C768, 0, "RegisterContextHooks", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C7B0, 0, "ReleaseContextHooks", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C7F4, 0, "sceKernelWaitModuleManagerEnabled", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801C90C, 0, "sceKernelRegisterDebuggerIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801CA80, 0, "sceKernelReleaseDebuggerIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801CBC8, 0, "sceKernelCallSubIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801CCC0, 0, "sceKernelGetUserIntrStack", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801CCF0, 0, "sceKernelCallUserIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801CE0C, 0, "sceKernelRegisterSubIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D044, 0, "sceKernelReleaseSubIntrHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D1B8, 0, "sceKernelEnableSubIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D288, 0, "sceKernelDisableSubIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D358, 0, "sceKernelSuspendSubIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D440, 0, "sceKernelResumeSubIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D520, 0, "sceKernelIsSubInterruptOccurred", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801D5F0, 0, "QueryIntrHandlerInfo", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801DA68, 0, "sceKernelGetCpuClockCounter", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801DA74, 0, "sceKernelGetCpuClockCounterWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801DBC8, 0, "sceKernelRegisterSystemCallTable", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801DC7C, 0, "sceKernelQuerySystemCall", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801E498, 0, "ReturnToThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801E924, 0, "sceKernelIsIntrContext", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801E93C, 0, "sceKernelGetInterruptExitCount", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801E948, 0, "SaveThreadContext", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801EB20, 0, "sceKernelCpuSuspendIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801EB4C, 0, "sceKernelCpuResumeIntr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8801EB74, 0, "sceKernelCpuResumeIntrWithSync", 0);
+
+	/* SysclibForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88027E10, 0, "strcat", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027EB0, 0, "strcspn", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027F1C, 0, "index", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027F4C, 0, "rindex", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027F94, 0, "strnlen", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027FDC, 0, "strpbrk", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028034, 0, "strspn", 0);
+	add_symbol_name(&machine->symbol_context, 0x880280A0, 0, "strstr", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028104, 0, "strtok", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028128, 0, "strtok_r", 0);
+	add_symbol_name(&machine->symbol_context, 0x880281FC, 0, "strtol", 0);
+	add_symbol_name(&machine->symbol_context, 0x880283D8, 0, "atob", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802840C, 0, "strtoul", 0);
+	add_symbol_name(&machine->symbol_context, 0x880285E0, 0, "strcmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028660, 0, "strcpy", 0);
+	add_symbol_name(&machine->symbol_context, 0x880285B0, 0, "strchr", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028748, 0, "strrchr", 0);
+	add_symbol_name(&machine->symbol_context, 0x880287F8, 0, "strncmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028698, 0, "strncpy", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028714, 0, "strlen", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028790, 0, "strncat", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028890, 0, "memchr", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028908, 0, "memcpy", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028970, 0, "memset", 0);
+	add_symbol_name(&machine->symbol_context, 0x880288C8, 0, "memcmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x880289E0, 0, "memmove", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802856C, 0, "bcopy", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028550, 0, "bcmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x88028590, 0, "bzero", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027D14, 0, "toupper", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027D50, 0, "tolower", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027D8C, 0, "look_ctype_table", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027D9C, 0, "get_ctype_table", 0);
+	add_symbol_name(&machine->symbol_context, 0x88027600, 0, "prnt", 0);
+	add_symbol_name(&machine->symbol_context, 0x880290E0, 0, "sprintf", 0);
+	add_symbol_name(&machine->symbol_context, 0x88029184, 0, "setjmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x880291C0, 0, "longjmp", 0);
+	add_symbol_name(&machine->symbol_context, 0x88029278, 0, "wmemset", 0);
+
+	/* ThreadManForUser */
+	add_symbol_name(&machine->symbol_context, 0x8802A330, 0, "_sceKernelReturnFromCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802A59C, 0, "sceKernelRegisterThreadEventHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802A8B4, 0, "sceKernelReleaseThreadEventHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802AD84, 0, "sceKernelReferThreadEventHandlerStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802AF8C, 0, "sceKernelCreateCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B130, 0, "sceKernelDeleteCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B2E4, 0, "sceKernelNotifyCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B4B0, 0, "sceKernelCancelCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B5C4, 0, "sceKernelGetCallbackCount", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B6D4, 0, "sceKernelCheckCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802B9B4, 0, "sceKernelReferCallbackStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802BF2C, 0, "sceKernelSleepThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C068, 0, "sceKernelSleepThreadCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C1CC, 0, "sceKernelWakeupThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C3A4, 0, "sceKernelCancelWakeupThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C4F0, 0, "sceKernelSuspendThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C70C, 0, "sceKernelResumeThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CA94, 0, "sceKernelWaitThreadEnd", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CA9C, 0, "sceKernelWaitThreadEndCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CD78, 0, "sceKernelDelayThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CD80, 0, "sceKernelDelayThreadCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CF80, 0, "sceKernelDelaySysClockThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CF88, 0, "sceKernelDelaySysClockThreadCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D1BC, 0, "sceKernelCreateSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D398, 0, "sceKernelDeleteSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D4F4, 0, "sceKernelSignalSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D738, 0, "sceKernelWaitSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D740, 0, "sceKernelWaitSemaCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802DA68, 0, "sceKernelPollSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802DC24, 0, "sceKernelCancelSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802DDDC, 0, "sceKernelReferSemaStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E148, 0, "sceKernelCreateEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E2E0, 0, "sceKernelDeleteEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E43C, 0, "sceKernelSetEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E6A4, 0, "sceKernelClearEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E7D0, 0, "sceKernelWaitEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E7D8, 0, "sceKernelWaitEventFlagCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802EBC8, 0, "sceKernelPollEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802EE38, 0, "sceKernelCancelEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802EFB8, 0, "sceKernelReferEventFlagStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802F26C, 0, "sceKernelCreateMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802F3F0, 0, "sceKernelDeleteMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802F618, 0, "sceKernelSendMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802F7D0, 0, "sceKernelReceiveMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802F7D8, 0, "sceKernelReceiveMbxCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802FB14, 0, "sceKernelPollMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802FD44, 0, "sceKernelCancelReceiveMbx", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802FE9C, 0, "sceKernelReferMbxStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88030158, 0, "sceKernelCreateMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x880303D0, 0, "sceKernelDeleteMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803052C, 0, "sceKernelSendMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x88030534, 0, "sceKernelSendMsgPipeCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x88030AD8, 0, "sceKernelTrySendMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x88030F4C, 0, "sceKernelReceiveMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x88030F54, 0, "sceKernelReceiveMsgPipeCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x88031554, 0, "sceKernelTryReceiveMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x88031A24, 0, "sceKernelCancelMsgPipe", 0);
+	add_symbol_name(&machine->symbol_context, 0x88031C08, 0, "sceKernelReferMsgPipeStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032288, 0, "sceKernelCreateVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803252C, 0, "sceKernelDeleteVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032688, 0, "sceKernelAllocateVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032690, 0, "sceKernelAllocateVplCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x880329A0, 0, "sceKernelTryAllocateVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032B64, 0, "sceKernelFreeVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032D44, 0, "sceKernelCancelVpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88032E9C, 0, "sceKernelReferVplStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x880331B0, 0, "sceKernelCreateFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x880334C0, 0, "sceKernelDeleteFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803361C, 0, "sceKernelAllocateFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88033624, 0, "sceKernelAllocateFplCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x88033900, 0, "sceKernelTryAllocateFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88033AC0, 0, "sceKernelFreeFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88033CE4, 0, "sceKernelCancelFpl", 0);
+	add_symbol_name(&machine->symbol_context, 0x88033E3C, 0, "sceKernelReferFplStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034C58, 0, "sceKernelUSec2SysClock", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034C9C, 0, "sceKernelUSec2SysClockWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034CA8, 0, "sceKernelSysClock2USec", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034D78, 0, "sceKernelSysClock2USecWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034E84, 0, "sceKernelGetSystemTime", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034F54, 0, "sceKernelGetSystemTimeWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x88034FF4, 0, "sceKernelGetSystemTimeLow", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803521C, 0, "sceKernelSetAlarm", 0);
+	add_symbol_name(&machine->symbol_context, 0x880352F8, 0, "sceKernelSetSysClockAlarm", 0);
+	add_symbol_name(&machine->symbol_context, 0x88035410, 0, "sceKernelCancelAlarm", 0);
+	add_symbol_name(&machine->symbol_context, 0x880358C8, 0, "sceKernelReferAlarmStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88035B0C, 0, "sceKernelCreateVTimer", 0);
+	add_symbol_name(&machine->symbol_context, 0x88035C4C, 0, "sceKernelDeleteVTimer", 0);
+	add_symbol_name(&machine->symbol_context, 0x88035DB0, 0, "sceKernelGetVTimerBase", 0);
+	add_symbol_name(&machine->symbol_context, 0x88035F20, 0, "sceKernelGetVTimerBaseWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803606C, 0, "sceKernelGetVTimerTime", 0);
+	add_symbol_name(&machine->symbol_context, 0x88036224, 0, "sceKernelGetVTimerTimeWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803639C, 0, "sceKernelSetVTimerTime", 0);
+	add_symbol_name(&machine->symbol_context, 0x88036690, 0, "sceKernelSetVTimerTimeWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803690C, 0, "sceKernelStartVTimer", 0);
+	add_symbol_name(&machine->symbol_context, 0x88036B34, 0, "sceKernelStopVTimer", 0);
+	add_symbol_name(&machine->symbol_context, 0x88036D00, 0, "sceKernelSetVTimerHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88036F9C, 0, "sceKernelSetVTimerHandlerWide", 0);
+	add_symbol_name(&machine->symbol_context, 0x88037224, 0, "sceKernelCancelVTimerHandler", 0);
+	add_symbol_name(&machine->symbol_context, 0x88037384, 0, "sceKernelReferVTimerStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88039194, 0, "sceKernelCreateThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803987C, 0, "sceKernelDeleteThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x88039B94, 0, "sceKernelStartThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803A098, 0, "_sceKernelExitThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803A0DC, 0, "sceKernelExitThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803A190, 0, "sceKernelExitDeleteThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803A6F0, 0, "sceKernelTerminateThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803A814, 0, "sceKernelTerminateDeleteThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803AA5C, 0, "sceKernelSuspendDispatchThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803AB40, 0, "sceKernelResumeDispatchThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803ACB4, 0, "sceKernelChangeCurrentThreadAttr", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803AEEC, 0, "sceKernelChangeThreadPriority", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B248, 0, "sceKernelRotateThreadReadyQueue", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B414, 0, "sceKernelReleaseWaitThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B618, 0, "sceKernelGetThreadId", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B69C, 0, "sceKernelGetThreadCurrentPriority", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B720, 0, "sceKernelGetThreadExitStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803BECC, 0, "sceKernelCheckThreadStack", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803C088, 0, "sceKernelGetThreadStackFreeSize", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803C384, 0, "sceKernelReferThreadStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803C610, 0, "sceKernelReferThreadRunStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803CC28, 0, "sceKernelReferSystemStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803CD2C, 0, "sceKernelGetThreadmanIdList", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803D0D4, 0, "sceKernelGetThreadmanIdType", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803D2A0, 0, "sceKernelReferThreadProfiler", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803D300, 0, "sceKernelReferGlobalProfiler", 0);
+
+	/* InitForKernel */
+	add_symbol_name(&machine->symbol_context, 0x8805DF28, 0, "sceKernelGetChunk", 0);
+	add_symbol_name(&machine->symbol_context, 0x8805DF7C, 0, "sceKernelRegisterChunk", 0);
+	add_symbol_name(&machine->symbol_context, 0x8805DFDC, 0, "sceKernelReleaseChunk", 0);
+	add_symbol_name(&machine->symbol_context, 0x8805F98C, 0, "sceKernelInitApitype", 0);
+	add_symbol_name(&machine->symbol_context, 0x8805F998, 0, "sceKernelBootFrom", 0);
+	add_symbol_name(&machine->symbol_context, 0x8805F9E8, 0, "sceKernelInitFileName", 0);
+
+	/* LoadExecForKernel */
+	add_symbol_name(&machine->symbol_context, 0x88063FC0, 0, "sceKernelLoadExec", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064118, 0, "sceKernelExitGameWithStatus", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064194, 0, "sceKernelExitGame", 0);
+	add_symbol_name(&machine->symbol_context, 0x880647B0, 0, "sceKernelExitVSHVSH", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064A68, 0, "sceKernelPrepareRegionFrame", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064AB4, 0, "sceKernelLoadExecBufferPlain", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064B50, 0, "sceKernelLoadExecFromHost", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064BF4, 0, "sceKernelRegisterExitCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064C04, 0, "sceKernelUnregisterExitCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064C20, 0, "sceKernelCheckExitCallback", 0);
+	add_symbol_name(&machine->symbol_context, 0x88064C2C, 0, "sceKernelInvokeExitCallback", 0);
+
+	/* misc */
+/*
+	add_symbol_name(&machine->symbol_context, 0x88006D10, 0, "sceKernelPowerRebootStart", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802C90C, 0, "sceKernelSuspendAllUserThreads", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802CA94, 0, "sceKernelWaitThreadEnd", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D738, 0, "sceKernelWaitSema", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802D740, 0, "sceKernelWaitSemaCB", 0);
+	add_symbol_name(&machine->symbol_context, 0x8802E6A4, 0, "sceKernelClearEventFlag", 0);
+	add_symbol_name(&machine->symbol_context, 0x88039B94, 0, "sceKernelStartThread", 0);
+	add_symbol_name(&machine->symbol_context, 0x8803B618, 0, "sceKernelGetThreadId", 0);
+	add_symbol_name(&machine->symbol_context, 0x880495D0, 0, "sceIoDevctl", 0);
+*/
+
+
+//	debug("sb.bin: 0x00000000\n");
+//	f = fopen("sb.bin", "r");
+//	ptr = 0x00000000;
+#define BINFILE(addr,filename) \
+{ \
+ 	ptr = addr; \
+	debug("%s: 0x%02x\n", filename, ptr); \
+	f = fopen(filename, "r"); \
+\
+	if (!f) { \
+		fatal("Could not open %s\n", filename); \
+		exit(1); \
+	} \
+\
+	while((len = fread(&c, 1, 1, f)) > 0) { \
+		store_byte(cpu, ptr++, c); \
+	} \
+	fclose(f); \
+}
+
+	BINFILE(0x88000000,"kmem.bin");
+	BINFILE(0xbfc00000,"boot.bin");
+
+}
+
