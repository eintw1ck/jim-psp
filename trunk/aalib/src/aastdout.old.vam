#include "config.h"
//#include <stdio.h>
#include "aalib.h"
#include <pspdisplay.h>
#include <psptypes.h>
#include <font.c>


//some function comes from scr_printf of pspsdk
//by pspdev.org
#define PSP_SCREEN_WIDTH 480
#define PSP_SCREEN_HEIGHT 272
#define PSP_LINE_SIZE 512
#define PSP_PIXEL_FORMAT 3

static int X = 0, Y = 0;
static int MX=68, MY=34;
static u32 txt_col = 0xFFFFFFFF;
static u32* g_vram_base = (u32 *) 0x04000000;


extern u8 msx[];

static int stdout_init(struct aa_hardware_params *p, void *none, struct aa_hardware_params *dest, void **n)
{
    static struct aa_hardware_params def={NULL, AA_NORMAL_MASK | AA_EXTENDED};
    *dest=def;

     /* PSP */
     /* Place vram in uncached memory */
     g_vram_base = (void *) (0x40000000 | (u32) sceGeEdramGetAddr());
     sceDisplaySetMode(0, PSP_SCREEN_WIDTH, PSP_SCREEN_HEIGHT);
     sceDisplaySetFrameBuf((void *) g_vram_base, PSP_LINE_SIZE, PSP_PIXEL_FORMAT, 1);

     u32 *vram = (u32 *) 0x04000000;

     for(X = 0; X < (PSP_LINE_SIZE * PSP_SCREEN_HEIGHT); X++)
     {
  	  *vram++ = 0;
     }
     /* PSP */

    return 1;
}
static void stdout_uninit(aa_context * c)
{
}
static void stdout_getsize(aa_context * c, int *width, int *height)
{
}

void psp_put_car( int x, int y, u32 color, u8 ch)
{
   int  i,j, l;
   u8   *font;
   u32  pixel;
   u32 *vram_ptr;
   u32 *vram;


   vram = g_vram_base + x;
   vram += (y * PSP_LINE_SIZE);

   font = &msx[ (int)ch * 8];
   for (i=l=0; i < 8; i++, l+= 8, font++)
   {
      vram_ptr  = vram;
      for (j=0; j < 8; j++)
        {
          if ((*font & (128 >> j)))
              pixel = color;
          else
              pixel = 0;

          *vram_ptr++ = pixel;
        }
      vram += PSP_LINE_SIZE;
   }
}


/*static void clear_screen(u32 color)
{
    int x;
    u32 *vram = g_vram_base;

    for(x = 0; x < (PSP_LINE_SIZE * PSP_SCREEN_HEIGHT); x++)
    {
                *vram++ = color;
    }
}*/


void psp_screen_clear()
{
        int y,p;

        for(y=0;y<MY;y++) {
   		for (p=0; p < MX; p++) {
			psp_put_car(p*7 , Y * 8, 0, 219);
       		}
	}

	//set x et y
	X=0;
        Y=0;
        
        //clear_screen(bg_col);
}


static void stdout_flush(aa_context * c)
{
    int x, y;
    for (y = 0; y < aa_scrheight(c); y++) {
	for (x = 0; x < aa_scrwidth(c)-2; x++) {
	    psp_put_car( x, y, txt_col, c->textbuffer[x + y * aa_scrwidth(c)]);
//	    pspDebugScreenPrintf("%c",c->textbuffer[x + y * aa_scrwidth(c)]);
	}
	psp_put_car( x, y, txt_col, 012);
//	pspDebugScreenPrintf(" \n");
    }
//    pspDebugScreenPrintf(" \n");
//    pspDebugScreenClear();
//    sceDisplayWaitVblankStart();
}
static void stdout_gotoxy(aa_context * c, int x, int y)
{
}
struct aa_driver stdout_d =
{
    "stdout", "Standard output driver",
    stdout_init,
    stdout_uninit,
    stdout_getsize,
    NULL,
    NULL,
    stdout_gotoxy,
    stdout_flush,
    NULL
};


static void stderr_flush(aa_context * c)
{
    int x, y;
    for (y = 0; y < aa_scrheight(c); y++) {
	for (x = 0; x < aa_scrwidth(c); x++) {
	    putc(c->textbuffer[x + y * aa_scrwidth(c)], stderr);
	}
	putc('\n', stderr);
    }
    putc('', stderr);
    putc('\n', stderr);
    fflush(stderr);
}
struct aa_driver stderr_d =
{
    "stderr", "Standard error driver",
    stdout_init,
    stdout_uninit,
    stdout_getsize,
    NULL,
    NULL,
    stdout_gotoxy,
    stderr_flush,
    NULL
};
