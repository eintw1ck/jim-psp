SDL port for the Sony PSP contributed by 
   Marcus R. Brown <mrbrown@ocgnet.org>
   Jim Paris <jim@jtan.com>
   Matthew H <matthewh@webone.com.au>

Building
--------
To build for the PSP, make sure psp-config is in the path and configure as follows:

   ./autogen.sh
   LDFLAGS="-L`psp-config --pspsdk-path`/lib -lc -lpspglue -lpspuser" \
     ./configure --host psp --prefix=`psp-config --pspsdk-path`/..

followed by make, make install. 


SDL_main
--------
When writing an SDL program, the typical use is to write your main
function as "SDL_main", then link -lSDLmain which provides the real
main().  In this implementation, -lSDLmain will:
  - Define the required PSP_* macros
  - Set up the "home" button callback.
  - Initialize the debugging screen
  - Call the user-supplied SDL_main
  - When it returns, delay 2.5 seconds, then exit to VSH.

Of course, you can leave off -lSDLmain, and write the real main()
yourself if you need more control than this.

By default, the PSP "sdl-config --cflags" will define main=SDL_main.


Building applications
---------------------
Write your source file as you would a normal SDL program.  Use the
standard Makefile as supplied with sdktest.  Above the final "include"
line, add:

PSPBIN = $(PSPSDK)/../bin
CFLAGS += `$(PSPBIN)/sdl-config --cflags`
LIBS += `$(PSPBIN)/sdl-config --libs`


Building autoconf applications
------------------------------
The general way to build autoconf applications is to add the psp
architecture to configure.in, then use --with-sdl-prefix to point to
the proper sdl-config.  For example, to build the applications in the
test/ subdirectory, use:

   ./autogen.sh
   LDFLAGS="-L`psp-config --pspsdk-path`/lib -lc -lpspglue -lpspuser" \
     ./configure --host psp --with-sdl-prefix=`psp-config --pspsdk-path`/.. 


Libc
----
SDL is linked against newlib's libc, and your SDL programs should be
too.  Linking against psplibc will appear to work but may behave
strangely at runtime.


Joystick
--------
Joystick has a two analog axes and 14 buttons.
Axes:
 0 - analog stick x
 1 - analog stick y
Buttons:
 0 - triangle
 1 - circle
 2 - cross
 3 - square
 4 - left trigger
 5 - right trigger
 6 - down
 7 - left
 8 - up
 9 - right
10 - select
11 - start
12 - home
13 - hold

Note: A "home" button press is sometimes generated when the screen
turns off after being idle ("backlight auto-off" setting).  This
generated event does not trigger the usual exit callback, though.


Status
------
   Video - yes, single 32-bit ABGR framebuffer surface only; SDL will
           emulate other formats as necessary.  Needs HW accel.  No 3D.
  Timers - yes, with multiple callbacks
 Threads - yes, with mutexes and semaphores
Joystick - yes, see above for button mapping
   Audio - no
   Mouse - no
Keyboard - no

No plans for how mouse and keyboard might work at the moment.


